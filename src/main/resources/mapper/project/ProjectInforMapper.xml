<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.elex.oa.dao.project.ProjectInforDao">

    <resultMap id="approvalList" type="com.elex.oa.entity.project.ApprovalList">
        <result column="ID_" javaType="string" property="relCode"></result>
        <result column="F_XMBH" javaType="string" property="projectCode"></result>
        <result column="F_XMMC" javaType="string" property="projectName"></result>
        <result column="F_TXRQ" javaType="string" property="writeDate"></result>
        <result column="F_BMJL_NAME" javaType="string" property="deptManager"></result>
        <result column="F_LXBM_NAME" javaType="string" property="inDepartment"></result>
        <result column="F_XMJL" javaType="string" property="projectManagerId"></result>
        <result column="F_XMJL_NAME" javaType="string" property="projectManager"></result>
        <result column="F_XMLY" javaType="string" property="projectSource"></result>
        <result column="F_SWJL" javaType="string" property="businessManagerId"></result>
        <result column="F_SWJL_NAME" javaType="string" property="businessManager"></result>
        <result column="F_XMLX" javaType="string" property="projectType"></result>
        <result column="F_XMGK" javaType="string" property="generalSituation"></result>
        <result column="F_SQR_NAME" javaType="string" property="proposer"></result>
        <result column="F_XMZT" javaType="string" property="projectStatus"></result>
        <result column="F_XMJD" javaType="string" property="projectPhase"></result>
        <result column="F_SFSM_NAME" javaType="string" property="classified"></result>
        <result column="F_XMZBH_NAME" javaType="string" property="capitalization"></result>
        <result column="F_XMKSSJ" javaType="string" property="startTime"></result>
        <result column="F_XMJSSJ" javaType="string" property="endTime"></result>
        <result column="F_XMJE" javaType="string" property="money"></result>
    </resultMap>

    <resultMap id="projectInfor" type="com.elex.oa.entity.project.ProjectInfor">
        <result column="project_code" javaType="string" property="projectCode"/>
        <result column="project_name" javaType="string" property="projectName"/>
        <result column="in_department" javaType="string" property="inDepartment"/>
        <result column="project_status" javaType="string" property="projectStatus"/>
        <result column="dept_manager" javaType="string" property="deptManager"/>
        <result column="proposer" javaType="string" property="proposer"/>
        <result column="write_date" javaType="string" property="writeDate"/>
        <result column="business_manager" javaType="string" property="businessManager"/>
        <result column="project_source" javaType="string" property="projectSource"/>
        <result column="project_manager" javaType="string" property="projectManager"/>
        <result column="project_type" javaType="string" property="projectType"/>
        <result column="general_situation" javaType="string" property="generalSituation"/>
        <result column="start_time" javaType="string" property="startTime"/>
        <result column="end_time" javaType="string" property="endTime"/>
        <result column="project_phase" javaType="string" property="projectPhase"/>
        <result column="capitalization" javaType="string" property="capitalization"/>
        <result column="classified" javaType="string" property="classified"/>
        <result column="project_members" javaType="string" property="projectMembers"/>
        <result column="project_member_id" javaType="string" property="projectMemberId"/>
        <result column="related_members" javaType="string" property="relatedMembers"/>
        <result column="related_member_id" javaType="string" property="relatedMemberId"/>
        <result column="party_name" javaType="string" property="partyName"/>
        <result column="party_address" javaType="string" property="partyAddress"/>
        <result column="party_phone" javaType="string" property="partyPhone"/>
        <result column="party_fax" javaType="string" property="partyFax"/>
        <result column="head_name" javaType="string" property="headName"/>
        <result column="head_position" javaType="string" property="headPosition"/>
        <result column="head_mobile" javaType="string" property="headMobile"/>
        <result column="head_email" javaType="string" property="headEmail"/>
        <result column="contact_name" javaType="string" property="contactName"/>
        <result column="contact_position" javaType="string" property="contactPosition"/>
        <result column="contact_mobile" javaType="string" property="contactMobile"/>
        <result column="contact_email" javaType="string" property="contactEmail"/>
        <result column="weekly_report" javaType="string" property="weeklyReport"/>
        <result column="next_plan" javaType="string" property="nextPlan"/>
        <result column="project_manager_code" javaType="string" property="projectManagerCode"/>
        <result column="weekly_report_start" javaType="string" property="weeklyReportStart"/>
        <result column="weekly_report_end" javaType="string" property="weeklyReportEnd"/>
        <result column="opportunity_code" javaType="string" property="opportunityCode"/>
        <result column="business_manager_code" javaType="string" property="businessManagerCode"/>
        <result column="related_member_code" javaType="string" property="relatedMemberCode"/>
        <result column="project_member_code" javaType="string" property="projectMemberCode"/>
        <result column="project_money" javaType="string" property="money"/>
        <result column=" project_member_code" javaType="string" property="projectMemberCode"/>
        <result column=" project_member_code" javaType="string" property="projectMemberCode"/>
    </resultMap>

    <resultMap id="osUser" type="com.elex.oa.entity.project.OsUser">
        <result column="USER_ID_" javaType="string" property="userId"></result>
        <result column="FULLNAME_" javaType="string" property="fullName"></result>
    </resultMap>

    <resultMap id="memberInfor" type="com.elex.oa.entity.project.ProjectInfor">
        <id column="id" javaType="int" property="id"></id>
        <result column="project_code" javaType="string" property="projectCode"></result>
        <result column="business_manager" javaType="string" property="businessManager"></result>
        <result column="project_members" javaType="string" property="projectMembers"></result>
        <result column="related_members" javaType="string" property="relatedMembers"></result>
        <result column="project_manager" javaType="string" property="projectManager"></result>
    </resultMap>

    <select id="getProConcludeByCode" resultType="String" parameterType="string">
        select ID_  from w_xmjxsqb where INST_STATUS_='RUNNING' AND F_XMBH=#{xmbh}
    </select>

    <select id="queryCodes" resultType="string">
        SELECT project_code FROM pro_pro_infor
    </select>

    <select id="queryApproval" parameterType="java.util.Map" resultMap="approvalList">
        SELECT ID_, F_XMBH, F_XMMC, F_TXRQ, F_BMJL_NAME, F_LXBM_NAME, F_XMJL, F_XMJL_NAME, F_XMLY, F_SWJL, F_SWJL_NAME, F_XMLX, F_XMGK, F_SQR_NAME,
        F_XMZT, F_XMJD, F_SFSM_NAME, F_XMZBH_NAME, F_XMKSSJ, F_XMJSSJ,F_XMJE
        FROM w_lxsqb WHERE INST_STATUS_ = 'SUCCESS_END'
        <if test="marker == 1">
            AND F_XMBH NOT IN
            <foreach collection="codes" item="item" index="index" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="addInfor" parameterType="java.util.List">
        INSERT INTO pro_pro_infor(id, project_code, project_name, project_status, in_department, dept_manager, proposer, write_date, business_manager,
        business_manager_code, project_source, project_manager, project_manager_code, project_type,
        general_situation, start_time, end_time, capitalization, classified, project_phase)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (NULL, #{item.projectCode}, #{item.projectName}, #{item.projectStatus}, #{item.inDepartment}, #{item.deptManager}, #{item.proposer},
            #{item.writeDate}, #{item.businessManager}, #{item.businessManagerId}, #{item.projectSource},
            #{item.projectManager}, #{item.projectManagerId}, #{item.projectType}, #{item.generalSituation},
            #{item.startTime}, #{item.endTime}, #{item.capitalization}, #{item.classified}, #{item.projectPhase})
        </foreach>
    </select>

    <select id="queryList" parameterType="com.elex.oa.entity.project.OperationQuery" resultMap="projectInfor">
        SELECT project_code, project_name, in_department, project_status, dept_manager, write_date, business_manager,
        project_source, project_manager, project_type, project_phase, start_time, end_time, capitalization, classified,
        general_situation, project_members, project_member_id, related_members, related_member_id, party_name,
        party_address, party_phone, party_fax, head_name, head_position, head_mobile, head_email, contact_name,
        contact_position, contact_mobile, contact_email, weekly_report, next_plan, weekly_report_start, weekly_report_end FROM pro_pro_infor
        <where>
            <if test="select1 == 1 and input1 != ''">
                AND project_code LIKE CONCAT('%',#{input1},'%')
            </if>
            <if test="select1 == 2 and input1 != ''">
                AND project_code NOT LIKE CONCAT('%',#{input1},'%')
            </if>
            <if test="select2 == 1 and input2 != ''">
                AND project_name LIKE CONCAT('%',#{input2},'%')
            </if>
            <if test="select2 == 2 and input2 != ''">
                AND project_name NOT LIKE CONCAT('%',#{input2},'%')
            </if>
            <if test="select3 == 1 and input3 != ''">
                AND in_department LIKE CONCAT('%',#{input3},'%')
            </if>
            <if test="select3 == 2 and input3 != ''">
                AND in_department NOT LIKE CONCAT('%',#{input3},'%')
            </if>
            <if test="list4 != null">
                AND project_source IN
                <foreach collection="list4" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="type != 2 and select5 == 1 and input5 != ''">
                AND business_manager LIKE CONCAT('%',#{input5},'%')
            </if>
            <if test="type != 2 and select5 == 2 and input5 != ''">
                AND business_manager NOT LIKE CONCAT('%',#{input5},'%')
            </if>
            <if test="list6 != null">
                AND project_type IN
                <foreach collection="list6" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="type != 2 and select7 == 1 and input7 != ''">
                AND project_manager LIKE CONCAT('%',#{input7},'%')
            </if>
            <if test="type != 2 and select7 == 2 and input7 != ''">
                AND project_manager NOT LIKE CONCAT('%',#{input7},'%')
            </if>
            <if test="list8 != null">
                AND project_status IN
                <foreach collection="list8" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="phaseList != null">
                AND project_phase IN
                <foreach collection="phaseList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="type == 2">
                AND (project_manager_code= #{name} OR business_manager_code = #{name})
            </if>
            <if test="type == 3">
                AND project_member_code LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="type == 4">
                AND related_member_code LIKE CONCAT('%',#{name},'%')
            </if>
        </where>
        ORDER BY project_code DESC
    </select>

    <update id="amendInfor" parameterType="com.elex.oa.entity.project.ProjectInfor">
        UPDATE pro_pro_infor SET project_name = #{projectName}, project_status = #{projectStatus} ,business_manager = #{businessManager}, business_manager_id = #{businessManagerId},
        business_manager_code = #{businessManagerCode}, project_source = #{projectSource},project_manager = #{projectManager}, project_manager_id = #{projectManagerId},
        project_manager_code = #{projectManagerCode}, project_type = #{projectType}, general_situation = #{generalSituation}, project_members = #{projectMembers},
        project_member_id = #{projectMemberId}, project_member_code = #{projectMemberCode}, related_members = #{relatedMembers}, related_member_id = #{relatedMemberId},
        related_member_code = #{relatedMemberCode}, party_name = #{partyName}, party_address = #{partyAddress}, party_phone = #{partyPhone}, party_fax = #{partyFax},
        head_name = #{headName}, head_position = #{headPosition},   head_mobile = #{headMobile}, head_email = #{headEmail}, contact_name = #{contactName},
        contact_position = #{contactPosition}, contact_mobile = #{contactMobile}, contact_email = #{contactEmail}, department_manager = #{departmentManager} WHERE project_code = #{projectCode}
    </update>

    <select id="queryOsUser" resultMap="osUser">
        SELECT USER_ID_ , FULLNAME_ FROM os_user
    </select>

    <select id="queryOsUserInJob" resultMap="osUser">
        SELECT USER_ID_ , FULLNAME_ FROM os_user WHERE STATUS_ = 'IN_JOB'
    </select>

    <select id="queryOsUserByUserId" resultMap="osUser" parameterType="string">
        SELECT USER_ID_ , FULLNAME_ FROM os_user WHERE USER_ID_ = #{userId}
    </select>

    <select id="queryBusiness" resultMap="memberInfor">
        SELECT id,project_code, business_manager FROM pro_pro_infor WHERE business_manager IS NOT NULL AND business_manager != ''
    </select>

    <update id="updateBusinessId" parameterType="java.util.List">
        UPDATE pro_pro_infor SET business_manager_id =
        <foreach collection="list" item="item" index="index" separator="" close="end" open="case ID">
            WHEN #{item.id} THEN #{item.businessManagerId}
        </foreach>
        ,business_manager_code =
        <foreach collection="list" item="item" index="index" separator="" close="end" open="case ID">
            WHEN #{item.id} THEN #{item.businessManagerCode}
        </foreach>
    </update>

    <select id="queryProjectMembers" resultMap="memberInfor">
        SELECT id, project_code, project_members FROM pro_pro_infor WHERE project_members IS NOT NULL AND project_members != ''
    </select>

    <update id="updateProjectMembers" parameterType="java.util.List">
        UPDATE pro_pro_infor SET project_member_code =
        <foreach collection="list" item="item" index="index" separator="" close="end" open="case ID">
            WHEN #{item.id} THEN #{item.projectMemberCode}
        </foreach>
        , project_member_id =
        <foreach collection="list" item="item" index="index" separator="" close="end" open="case ID">
            WHEN #{item.id} THEN #{item.projectMemberId}
        </foreach>
    </update>

    <select id="queryRelatedMembers" resultMap="memberInfor">
        SELECT id, project_code, related_members FROM pro_pro_infor WHERE related_members IS NOT NULL AND related_members != ''
    </select>

    <update id="updateRelatedMembers" parameterType="java.util.List">
        UPDATE pro_pro_infor SET related_member_code =
        <foreach collection="list" item="item" index="index" separator="" close="end" open="case ID">
            WHEN #{item.id} THEN #{item.relatedMemberCode}
        </foreach>
        , related_member_id =
        <foreach collection="list" item="item" index="index" separator="" close="end" open="case ID">
            WHEN #{item.id} THEN #{item.relatedMemberId}
        </foreach>
    </update>

    <select id="queryProjects" resultMap="memberInfor">
        SELECT id, project_code, project_manager FROM pro_pro_infor WHERE project_manager IS NOT NULL AND project_manager != ''
    </select>

    <update id="updateProjects" parameterType="java.util.List">
        UPDATE pro_pro_infor SET project_manager_code =
        <foreach collection="list" item="item" index="index" separator="" open="case ID" close="end">
            WHEN #{item.id} THEN #{item.projectManagerCode}
        </foreach>
        ,project_manager_id =
        <foreach collection="list" item="item" index="index" separator="" open="case ID" close="end">
            WHEN #{item.id} THEN #{item.projectManagerId}
        </foreach>
        ,department_manager =
        <foreach collection="list" item="item" index="index" separator="" open="case ID" close="end">
            WHEN #{item.id} THEN #{item.departmentManager}
        </foreach>
    </update>

    <update id="projectStatus" parameterType="com.elex.oa.entity.project.ProjectVarious">
        UPDATE pro_pro_infor SET project_status = #{code} WHERE project_status = #{name}
    </update>

    <update id="projectSource" parameterType="com.elex.oa.entity.project.ProjectVarious">
        UPDATE pro_pro_infor SET project_source = #{code} WHERE project_source = #{name}
    </update>

    <update id="projectType" parameterType="com.elex.oa.entity.project.ProjectVarious">
        UPDATE pro_pro_infor SET project_type = #{code} WHERE project_type LIKE CONCAT('%',#{name},'%')
    </update>

    <select id="queryLastId" resultType="string">
        SELECT MAX(id) FROM pro_pro_infor
    </select>

    <insert id="importData" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO pro_pro_infor (id, project_code, project_name, in_department, project_status, dept_manager, proposer, write_date, business_manager,
        project_source, project_manager, project_type, general_situation, project_members, related_members, party_name, party_address, party_phone, party_fax,
        head_name, head_position, head_mobile, head_email, contact_name, contact_position, contact_mobile, contact_email)
        <foreach collection="list" item="item" index="index" separator="UNION ALL">
            ( SELECT NULL, #{item.projectCode}, #{item.projectName}, #{item.inDepartment}, #{item.projectStatus}, #{item.deptManager}, #{item.proposer},
            #{item.writeDate}, #{item.businessManager}, #{item.projectSource}, #{item.projectManager}, #{item.projectType}, #{item.generalSituation},
            #{item.projectMembers}, #{item.relatedMembers}, #{item.partyName}, #{item.partyAddress}, #{item.partyPhone}, #{item.partyFax}, #{item.headName},
            #{item.headPosition}, #{item.headMobile}, #{item.headEmail}, #{item.contactName}, #{item.contactPosition}, #{item.contactMobile}, #{item.contactEmail}
            FROM DUAL WHERE NOT EXISTS (
            SELECT project_code FROM pro_pro_infor WHERE project_code = #{item.projectCode}
            )
            )
        </foreach>
    </insert>

    <select id="queryCodeList" parameterType="int" resultType="string">
        SELECT project_code FROM pro_pro_infor WHERE id > #{id}
    </select>

    <select id="queryExport" parameterType="com.elex.oa.entity.project.InforQuery" resultMap="projectInfor">
        SELECT project_code, project_name, in_department, project_status, dept_manager, proposer, write_date, business_manager,
        project_source, project_manager, project_type, general_situation, project_members, project_member_id, related_members,
        related_member_id, party_name, party_address, party_phone, party_fax, head_name, head_position, head_mobile, head_email,
        contact_name, contact_position, contact_mobile, contact_email
        FROM pro_pro_infor
        <where>
            <if test="codeSelect == 1 and codeInput != ''">
                AND project_code LIKE CONCAT('%',#{codeInput},'%')
            </if>
            <if test="codeSelect == 2 and codeInput != ''">
                AND project_code NOT LIKE CONCAT('%',#{codeInput},'%')
            </if>
            <if test="nameSelect == 1 and nameInput != ''">
                AND project_name LIKE CONCAT('%',#{nameInput},'%')
            </if>
            <if test="nameSelect == 2 and nameInput != ''">
                AND project_name NOT LIKE CONCAT('%',#{nameInput},'%')
            </if>
            <if test="deptSelect == 1 and deptInput != ''">
                AND in_department LIKE CONCAT('%',#{deptInput},'%')
            </if>
            <if test="deptSelect == 2 and deptInput != ''">
                AND in_department NOT LIKE CONCAT('%',#{deptInput},'%')
            </if>
            <if test="sourceList != null">
                AND project_source IN
                <foreach collection="sourceList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="businessSelect == 1 and businessInput != ''">
                AND business_manager LIKE CONCAT('%',#{businessInput},'%')
            </if>
            <if test="businessSelect == 2 and businessInput != ''">
                AND business_manager NOT LIKE CONCAT('%',#{businessInput},'%')
            </if>
            <if test="typeList != null">
                AND project_type IN
                <foreach collection="typeList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="deliverySelect == 1 and deliveryInput != ''">
                AND project_manager LIKE CONCAT('%',#{deliveryInput},'%')
            </if>
            <if test="deliverySelect == 2 and deliveryInput != ''">
                AND project_manager NOT LIKE CONCAT('%',#{deliveryInput},'%')
            </if>
            <if test="statusList != null">
                AND project_status IN
                <foreach collection="statusList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <select id="obtainList" parameterType="com.elex.oa.entity.project.InforQuery" resultMap="projectInfor">
        SELECT project_code, project_name, in_department, project_status, dept_manager, proposer, write_date, business_manager,
        project_source, project_manager, project_type, general_situation, project_members, related_members, party_name, party_address,
        party_phone, party_fax, head_name, head_position, head_email, contact_name, contact_position, contact_mobile, contact_email,
        project_phase, start_time, end_time, capitalization, classified, weekly_report, next_plan, weekly_report_start,business_manager_code,project_manager_code,project_member_code,related_member_code,weekly_report_end
        , opportunity_code, project_money
        , opportunity_code
        FROM pro_pro_infor
        <where>
            <if test="codeSelect == 1 and codeInput != ''">
                AND project_code LIKE CONCAT('%',#{codeInput},'%')
            </if>
            <if test="codeSelect == 2 and codeInput != ''">
                AND project_code NOT LIKE CONCAT('%', #{codeInput}, '%')
            </if>
            <if test="nameSelect == 1 and nameInput != ''">
                AND project_name LIKE CONCAT('%',#{nameInput},'%')
            </if>
            <if test="nameSelect == 2 and nameInput != ''">
                AND project_name NOT LIKE CONCAT('%',#{nameInput},'%')
            </if>
            <if test="deptSelect == 1 and deptInput != ''">
                AND in_department LIKE CONCAT('%',#{deptInput},'%')
            </if>
            <if test="deptSelect == 2 and deptInput != ''">
                AND in_department NOT LIKE CONCAT('%',#{deptInput},'%')
            </if>
            <if test="sourceList != null">
                AND project_source IN
                <foreach collection="sourceList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="type != 2 and businessSelect == 1 and businessInput != ''">
                AND business_manager LIKE CONCAT('%',#{businessInput},'%')
            </if>
            <if test="type != 2 and businessSelect == 2 and businessInput != ''">
                AND business_manager NOT LIKE CONCAT('%',#{businessInput},'%')
            </if>
            <if test="typeList != null">
                AND project_type IN
                <foreach collection="typeList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="type != 2 and deliverySelect == 1 and deliveryInput != ''">
                AND project_manager LIKE CONCAT('%',#{deliveryInput},'%')
            </if>
            <if test="type != 2 and deliverySelect == 2 and deliveryInput != ''">
                AND project_manager NOT LIKE CONCAT('%',#{deliveryInput},'%')
            </if>
            <if test="statusList != null">
                AND project_status IN
                <foreach collection="statusList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="phaseList != null">
                AND project_phase IN
                <foreach collection="phaseList" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="type == 2">
                AND (project_manager_code = #{name} OR business_manager_code = #{name})
            </if>
            <if test="type == 3">
                AND project_member_code LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="type == 4">
                AND related_member_code LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="type == 5">
                AND in_department = #{inDepartment}
            </if>
        </where>
    </select>

    <select id="queryInforByCode" parameterType="string" resultMap="projectInfor">
        SELECT *
        FROM pro_pro_infor WHERE project_code = #{projectCode}
    </select>

    <select id="queryInforByCodeNew" parameterType="string" resultMap="projectInfor">
        SELECT *
        FROM pro_pro_infor WHERE project_code = #{projectCode}
    </select>

    <update id="amendPro" parameterType="com.elex.oa.entity.project.ProjectInfor">
        UPDATE pro_pro_infor SET project_name=#{projectName},project_manager_id=#{projectManagerId},project_manager_code=#{projectManagerCode},business_manager=#{businessManager},business_manager_id=#{businessManagerId},business_manager_code = #{businessManagerCode},project_phase = #{projectPhase},
        project_status = #{projectStatus},start_time = #{startTime},end_time= #{endTime},project_manager=#{projectManager },in_department = #{inDepartment},dept_manager = #{deptManager}, general_situation = #{generalSituation},project_members = #{projectMembers}, project_member_id =
        #{projectMemberId}, related_members = #{relatedMembers}, related_member_id = #{relatedMemberId}, party_name = #{partyName},
        party_address = #{partyAddress}, party_phone = #{partyPhone}, party_fax = #{partyFax}, head_name = #{headName}, head_position =
        #{headPosition}, head_mobile = #{headMobile}, head_email = #{headEmail}, contact_name = #{contactName}, contact_position =
        #{contactPosition}, contact_mobile = #{contactMobile}, contact_email = #{contactEmail}, project_member_code = #{projectMemberCode},
        related_member_code = #{relatedMemberCode}, project_money = #{money} WHERE project_code = #{projectCode}
    </update>

    <select id="queryInstStatus" parameterType="string" resultType="string">
        SELECT INST_STATUS_ FROM w_lxsqb WHERE ID_ = #{id}
    </select>

    <select id="queryInforById" parameterType="string" resultMap="approvalList">
        SELECT F_XMBH, F_XMMC, F_TXRQ, F_BMJL_NAME, F_LXBM_NAME, F_XMJL, F_XMJL_NAME, F_XMLY, F_SWJL, F_SWJL_NAME, F_XMLX,
        F_XMGK, F_SQR_NAME, F_XMZT, F_XMJD, F_SFSM_NAME, F_XMZBH_NAME, F_XMKSSJ, F_XMJSSJ ,F_XMJE
        FROM w_lxsqb WHERE ID_ = #{id}
    </select>

    <insert id="addProjectInfor" parameterType="com.elex.oa.entity.project.ApprovalList">
        INSERT INTO pro_pro_infor(id, project_code, project_name, project_status, in_department, dept_manager, proposer,
        write_date, business_manager, business_manager_code, project_source, project_manager, project_manager_code, project_type,
        general_situation, start_time, end_time, capitalization, classified, project_phase, project_money)
        VALUES (NULL, #{projectCode}, #{projectName}, #{projectStatus}, #{inDepartment}, #{deptManager},
        #{proposer},  #{writeDate}, #{businessManager}, #{businessManagerId}, #{projectSource},
        #{projectManager}, #{projectManagerId}, #{projectType}, #{generalSituation}, #{startTime},
        #{endTime}, #{capitalization}, #{classified}, #{projectPhase} ,#{money})
    </insert>

    <insert id="addWeeklyPlan" parameterType="com.elex.oa.entity.project.ProjectInfor">
        INSERT INTO pro_week VALUES (NULL, #{projectCode}, #{startTime}, #{endTime}, NULL, NULL, NULL, NULL, #{weeklyReport}, #{nextPlan}, NULL, NULL, NULL, NULL )
    </insert>

    <update id="updateProjectInforWeeklyPlan" parameterType="com.elex.oa.entity.project.ProjectInfor">
        UPDATE pro_pro_infor SET weekly_report = #{weeklyReport}, next_plan = #{nextPlan}, weekly_report_start = #{weeklyReportStart}, weekly_report_end = #{weeklyReportEnd} WHERE project_code = #{projectCode}
    </update>

    <select id="allWeeklyPlan" resultType="HashMap">
        SELECT * FROM pro_week WHERE project_code = #{projectCode} AND id in (SELECT max(id) FROM pro_week WHERE project_code = #{projectCode} GROUP BY start_date) ORDER BY start_date DESC
    </select>

    <select id="isNewestWeeklyReport" resultType="String">
        SELECT weekly_report_start FROM pro_pro_infor WHERE project_code = #{projectCode}
    </select>
</mapper>
